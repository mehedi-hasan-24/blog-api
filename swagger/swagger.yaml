openapi: '3.0.0'
info:
  title: Blog API
  version: '0.0.0'
  description: >
    The Blog REST API Application is a collection of public 
    api endpoints that enables users to create, manage, and 
    interact with a single author blog. The backend application 
    provides authentication functionality, allows users to create 
    and view articles, comment on articles, and upload cover 
    photos for articles. This document outlines the functional 
    and non-functional requirements for the development of the 
    Blog REST API Application.
  contact:
    name: 'Md. Mehedi Hasan'
    email: 'hmehedi203@gmail.com'
    url: https://github.com/mehedi-hasan-24
  license:
    name: 'MIT'
    url: 'https://www.mit.edu/~amini/LICENSE.md'
servers:
  - url: https://localhost:8000/api/v1
tags:
  - name: health
    description: checking the health
  - name: authentication
    description: sign-in, register (Public)
  - name: articles
    description: Articles endpoints (Private, Public)
  - name: comments
    description: Comment endpoints (Private, Public)
  - name: user
    description: user endpoints (Admin)

paths:
  /auth/signup: 
    $ref: './auth/signup.yaml'
  /auth/login:
    $ref: './auth/signup.yaml'


  /health:
    get:
      tags:
        - health
      description: 'Test the health of the api'
      responses:
        '200':
          description: OK
          content:
            'application/json': 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OK
        '500':
          $ref: "#/components/responses/server-error"
components: 
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    "auth-bad-request":
          description: Bad request
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 400
                  error:
                    type: string
                    example: Bad request
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: email
                        message:
                          type: string
                          example: Invalid email
    'server-error': 
        description: 'Server error'
        content:
          'application/json':
            schema: 
              type: object
              properties:
                code:
                  type: integer
                  example: 500
                message:
                  type: string
                  example: Server Error