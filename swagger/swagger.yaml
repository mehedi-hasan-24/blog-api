openapi: '3.0.0'
info:
  title: Blog API
  version: '0.0.0'
  description: >
    The Blog REST API Application is a collection of public 
    api endpoints that enables users to create, manage, and 
    interact with a single author blog. The backend application 
    provides authentication functionality, allows users to create 
    and view articles, comment on articles, and upload cover 
    photos for articles. This document outlines the functional 
    and non-functional requirements for the development of the 
    Blog REST API Application.
  contact:
    name: 'Md. Mehedi Hasan'
    email: 'hmehedi203@gmail.com'
    url: https://github.com/mehedi-hasan-24
  license:
    name: 'MIT'
    url: 'https://www.mit.edu/~amini/LICENSE.md'
servers:
  - url: https://localhost:8000/api/v1
tags:
  - name: health
    description: checking the health
  - name: authentication
    description: sign-in, register (Public)
  - name: articles
    description: Articles endpoints (Private, Public)
  - name: comments
    description: Comment endpoints (Private, Public)
  - name: user
    description: user endpoints (Admin)

paths:
  /auth/signup: 
    $ref: './auth/signup.yaml'
  /auth/login:
    $ref: './auth/signin.yaml'
  /articles:
    $ref: './articles/articles.yaml'
  /articles/{id}:
    $ref: './articles/article_by_id.yaml'


  /health:
    get:
      tags:
        - health
      description: 'Test the health of the api'
      responses:
        '200':
          description: OK
          content:
            'application/json': 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OK
        '500':
          $ref: "#/components/responses/server-error"
components:
  schemas:
    Article:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            authorId:
              type: integer
              format: int32
              example: 1
            title:
              type: string
              example: First Article
            body:
              type: string
              format: text
              example: The body of the first article
            cover:
              type: string
              format: url
              example: https://s3.aws.example.com/23nds
            status:
              type: string
              enum: [draft, published]
              example: draft
          required: [id, authorId, title, body, status]
        - $ref: "#/components/schemas/Timestamp"
    ArticleCreateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: "Article created successfully"
        data:
          $ref: "#/components/schemas/Article"
        links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: "/articles/1"
            author:
              type: string
              format: url
              example: "/articles/1/author"
            comments:
              type: string
              format: url
              example: "/articles/1/comments"
    Timestamp:
      type: object
      properties:
        createdAt:
          type: string
          format: datetime
        updatedAt:
          type: string
          format: datetime
      required: [createdAt, updatedAt]
    Pagination:
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 2
        limit:
          type: integer
          format: int32
          example: 10
        next:
          type: integer
          format: int32
          example: 3
        prev:
          type: integer
          format: int32
          example: 1
        totalPage:
          type: integer
          format: int32
          example: 5
        totalItems:
          type: integer
          format: int32
          example: 50
      required:
        - page
        - limit
        - totalPage
        - totalItems
    AuthorDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: "Mehedi Hasan"
      required: [id, name]
    Comment:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            authorId:
              type: integer
              format: int32
              example: 1
            articleId:
              type: integer
              format: int32
              example: 1
            body:
              type: string
              format: text
              example: The body of the comment
            status:
              type: string
              enum: [public, private]
              example: public
          required: [id, authorId, articleId, body, status]
        - $ref: "#/components/schemas/Timestamp"
    ArticleUpdateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: Article updated successfully
        data:
          $ref: "#/components/schemas/Article"
        links:
          type: object
          properties:
            self:
              type: string
              example: "/articles/1"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    "auth-bad-request":
          description: Bad request
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 400
                  error:
                    type: string
                    example: Bad request
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: email
                        message:
                          type: string
                          example: Invalid email
    'server-error': 
        description: 'Server error'
        content:
          'application/json':
            schema: 
              type: object
              properties:
                code:
                  type: integer
                  example: 500
                error:
                  type: string
                  example: Iternal Server Error
                message:
                  type: string
                  example: Server Error. We are sorry for the inconveniences.
    "401":
      description: Unauthorized
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 401
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: You don't have the right permissions
    "404":
      description: Resource Not Found
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 404
              error:
                type: string
                example: Not Found
              message:
                type: string
                example: Requested resource not found
    "403":
      description: Resource Forbidden
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 403
              error:
                type: string
                example: Resource Forbidden
              message:
                type: string
                example: Resource forbidden. You don't have enough permissions
  parameters:
    pageParam:
      description: Current page number.
      name: page
      in: query
      schema:
        type: integer
        example: 2
    limitParam:
      description: Number of max articles in a single request.
      name: limit
      in: query
      schema:
        type: integer
        example: 10
    sortTypeParam:
      description: Sort type 
      name: sortType
      in: query
      schema:
        type: string
        enum:  [asc, dsc]
        example: dsc
    sortByParam:
      name: sortBy
      in: query
      schema:
        type: string
        example: updatedAt
    searchParam:
      name: search
      in: query
      description: Search by key for a specific field.
      schema:
        type: string
        example: title
    idPathParam:
      in: path
      name: id
      required: true
      description: Article ID
      schema:
        type: number
        example: 1
          